@{
ViewData["Title"] = "Profil";
}
<div class="container">
    @if(ViewBag.Error!= null)
    {
    <div class="row mb-4">
        <div class="col-12 alert alert-danger">
            @ViewBag.Error
        </div>
    </div>
    }
    <div class="row mb-4">
        <div class="col">@ViewBag.TeacherName</div>
        <div class="col">@ViewBag.ClassName Sınıfı</div>
        <div class="col">@ViewBag.CourseName Dersi</div>
        <div class="col">@ViewBag.StartTime - @ViewBag.EndTime</div>
    </div>
    <div class="row mb-4">
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12">

            <button type="button" class="btn btn-primary" id="startBtn" value="0">Yoklamayı Başlat</button>
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12" id="rollcall-button">

        </div>
        <div class="row mb-4 p-4 justify-content-center">
            <div class="col-md-4 img-fluid p-2" id="webcam-container">

            </div>
            <div class="col-md-8 p-2" id="label-container">
                <p></p>
            </div>
        </div>


    </div>
    @section Scripts {
    <script src='https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs@latest/dist/tf.min.js'></script>
    <script
        src='https://cdn.jsdelivr.net/npm/@@teachablemachine/image@latest/dist/teachablemachine-image.min.js'></script>
    <script type="text/javascript">
        // Daha fazla API fonksiyonu için:
        // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image
        // the link to your model provided by Teachable Machine export panel
        var rollCallBtn = document.createElement("button");
        rollCallBtn.innerHTML = "Yoklama Al";
        rollCallBtn.className = "btn btn-primary";
        rollCallBtn.onclick = function () {
            var data = {
                attendanceId: @ViewBag.AttendanceId,
                rollCall: numbers
            };
            var url = '@Url.Action("TakeRollCall", "Profile")';
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.location = "@Url.Action("Index", "Profile")";
                    } else {
                        alert("Yoklama alınamadı." + data.message);
                    }
                })
                .catch(error => {
                    alert("Bir hata oluştu.");
                });
        };


        const URL = "../../js/models/";
        let model, webcam, labelContainer, maxPredictions;
        let rollCall = [];
        let numbers = [];
        // Öğrenci numaralarını ve isimlerini almak için
        // Görüntü modelini yükle ve web kamerasını ayarla
        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";
            // model ve metadata'yı yükle
            // Dosya seçiciden veya yerel sabit sürücünüzden dosyaları desteklemek için 
            // API'deki tmImage.loadFromFiles()'a bakın
            // Not: pose kütüphanesi pencerenize "tmImage" nesnesini ekler (window.tmImage)
            model = await tmImage.load(modelURL, metadataURL);
            maxPredictions = model.getTotalClasses();
            // Web kamerasını ayarlamak için kolaylık fonksiyonu
            const flip = true; // web kamerasını çevir
            webcam = new tmImage.Webcam(300, 300, flip); // genişlik, yükseklik, çevirme
            await webcam.setup(); // web kamerası erişimi iste
            await webcam.play();
            window.requestAnimationFrame(loop);
            //Buttonu gizle
            document.getElementById("startBtn").value = "1"
            document.getElementById("startBtn").innerHTML = "Durdur";
            // DOM'a elementleri ekle
            document.getElementById("webcam-container").appendChild(webcam.canvas);
            labelContainer = document.getElementById("label-container");
            for (let i = 0; i < maxPredictions; i++) { // ve sınıf etiketleri
                labelContainer.appendChild(document.createElement("div"));
            }
            document.getElementById("rollcall-button").appendChild(rollCallBtn);
        }
        document.getElementById("startBtn").onclick = function () {
            if (document.getElementById("startBtn").value == "0") {
                document.getElementById("startBtn").className = "btn btn-danger";
                init();
            } else {
                console.log(rollCall);
                webcam.stop();
                document.getElementById("startBtn").className = "btn btn-primary";
                document.getElementById("webcam-container").removeChild(webcam.canvas);
                document.getElementById("startBtn").value = "0";
                document.getElementById("startBtn").innerHTML = "Yoklamayı Başlat";
            }
        }



        async function loop() {
            webcam.update(); // update the webcam frame
            await predict();
            window.requestAnimationFrame(loop);
        }

        // Web kamerası görüntüsünü görüntü modelinden geçir
        async function predict() {
            // tahmin bir resim, video veya canvas html elementi alabilir
            const prediction = await model.predict(webcam.canvas);

            for (let i = 0; i < maxPredictions; i++) {
                // en yüksek olasılığa sahip etiketi bul
                // ve etiketi ve tahmin olasılığını göster
                if (prediction[i].probability.toFixed(2) > 0.6) {
                    if (!rollCall.includes(prediction[i].className)) {
                        rollCall.push(prediction[i].className);
                        showPredictions(rollCall);
                    }
                }
            }
        }

        function showPredictions(predictions) {
            // Etiket konteynerını temizle
            labelContainer.innerHTML = "";
            numbers = [];
            const classPrediction = document.createElement("ol");
            // Tahminleri göster
            predictions.forEach((prediction) => {
                let studentData = JSON.parse(prediction);
                // Öğrenci numarasını listeye ekle
                numbers.push(studentData.Nu);

                const studentLine = "<li>" + studentData.Nu + " - " + studentData.Firstname + " " + studentData.Surname + "</li>";
                classPrediction.innerHTML += studentLine;
            });
            labelContainer.appendChild(classPrediction);
            // console.log(numbers);
        }

    </script>
    }